#include <cassert>
#include "Board.h"
#include "Evaluator.h"

namespace
{
    const int32 SCORE_BY_POSITION[MAX_CHESS_TYPE][BOARD_SIZE] = {
        { // EMPTY
		    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   // Boundary
		    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		    0, 0, 0, 0, 0, 0, 0, 0, 0, 0    // Boundary
        },

        { // BP
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,   // Boundary
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0, 35,  0,-43,  0,  9,  0,-43,  0, 35,
            0,  0,  0,-13, -1, -5, -1,-13,  0,  0,
            0,  0,  0, -3, -1, -1, -1, -3,  0,  0,
            0,  0,  0, -1,  0,  0,  0, -1,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0    // Boundary	};
        },

        { // BC
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,   // Boundary
            0,  3,  8,  0,  0,  0,  0,  0,  8,  3,
            0,  1, 18, -3,  5,  6,  5, -3, 18,  1,
            0,  6, 12,  4, 15,-25, 15,  4, 12,  6,
            0,  0, 17,  0,  3,  1,  3,  0, 17,  0,
            0,  1, 11, -2,  4, -1,  4, -2, 11,  1,
            0,  0, 16,  0,  3, -2,  3,  0, 16,  0,
            0, -5,  5, -8,  4, -6,  4, -8,  5, -5,
            0,  0,  3, -3,  2, -2,  2, -3,  3,  0,
            0,  0,  5,  0,  2,  0,  2,  0,  5,  0,
            0, -2,  1, -2,  0,  0,  0, -2,  1, -2,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0     // Boundary	};
        },

        { // BH
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,    // Boundary
            0,  0, 16,  0,  3, 13,  3,  0, 16,  0,
            0, 15,  0,  2, -3,  0, -3,  2,  0, 15,
            0, -6,  0,-79, -1, -7, -1,-79,  0, -6,
            0,  0, -3, -2,-15, -1,-15, -2, -3,  0,
            0,  1,  0,  0, -6,  0, -6,  0,  0,  1,
            0, -2, -1, -7, -1, -4, -1, -7, -1, -2,
            0,  0,  0, -2,  0, -2,  0, -2,  0,  0,
            0,  0,  0, -1,  0,  0,  0, -1,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0     // Boundary	};
        },

        { // BR
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0, 13,-49,  1, -3,  0, -3,  1,-49, 13,
            0,  3, 13,  4,-10,  3,-10,  4, 13,  3,
            0, 17,  9,  0,  2,  0,  2,  0,  9, 17,
            0, -1,  5,  0,  0, -1,  0,  0,  5, -1,
            0,  4,-10, -9, -8,  1, -8, -9,-10,  4,
            0,  1,  3, -1, -2,  0, -2, -1,  3,  1,
            0, -2, -8,-11, -7, -2, -7,-11, -8, -2,
            0,  0,  1, -2,  2,  0,  2, -2,  1,  0,
            0,  1,  2,  0, -2,  0, -2,  0,  2,  1,
            0,  0, -5, -2, -1,  0, -1, -2, -5,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0     // Boundary	};
        },

        { // BE
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,    // Boundary
            0,  0,  0,  9,  0,  0,  0,  9,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0, 27,  0,  0,  0,-26,  0,  0,  0, 27,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  7,  0,  0,  0,  7,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0     // Boundary	};
        },

        { // BG
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,    // Boundary
            0,  0,  0,  0,  7,  0,  7,  0,  0,  0,
            0,  0,  0,  0,  0,  2,  0,  0,  0,  0,
            0,  0,  0,  0, 14,  0, 14,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0     // Boundary	};
        },

        { // BK
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,   // Boundary
            0,  0,  0,  0,  6,  0,  6,  0,  0,  0,
            0,  0,  0,  0,  0, 18,  0,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0    // Boundary
        },

        { // BNDRY
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   // Boundary
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0    // Boundary	};
        },

        { // RP
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,   // Boundary
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  1,  0,  0,  0,  1,  0,  0,
            0,  0,  0,  3,  1,  1,  1,  3,  0,  0,
            0,  0,  0, 13,  1,  5,  1, 13,  0,  0,
            0,-35,  0, 43,  0, -9,  0, 43,  0,-35,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0    // Boundary	};
        },

        { // RC
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,   // Boundary
            0,  2, -1,  2,  0,  0,  0,  2, -1,  2,
            0,  0, -5,  0, -2,  0, -2,  0, -5,  0,
            0,  0, -3,  3, -2,  2, -2,  3, -3,  0,
            0,  5, -5,  8, -4,  6, -4,  8, -5,  5,
            0,  0,-16,  0, -3,  2, -3,  0,-16,  0,
            0, -1,-11,  2, -4,  1, -4,  2,-11, -1,
            0,  0,-17,  0, -3, -1, -3,  0,-17,  0,
            0, -6,-12, -4,-15, 25,-15, -4,-12, -6,
            0, -1,-18,  3, -5, -6, -5,  3,-18, -1,
            0, -3, -8,  0,  0,  0,  0,  0, -8, -3,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0    // Boundary	};
        },

        { // RH
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,   // Boundary
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  1,  0,  0,  0,  1,  0,  0,
            0,  0,  0,  2,  0,  2,  0,  2,  0,  0,
            0,  2,  1,  7,  1,  4,  1,  7,  1,  2,
            0, -1,  0,  0,  6,  0,  6,  0,  0, -1,
            0,  0,  3,  2, 15,  1, 15,  2,  3,  0,
            0,  6,  0, 79,  1,  7,  1, 79,  0,  6,
            0,-15,  0, -2,  3,  0,  3, -2,  0,-15,
            0,  0,-16,  0, -3,-13, -3,  0,-16,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0    // Boundary	};
        },

        { // RR
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  5,  2,  1,  0,  1,  2,  5,  0,
            0, -1, -2,  0,  2,  0,  2,  0, -2, -1,
            0,  0, -1,  2, -2,  0, -2,  2, -1,  0,
            0,  2,  8, 11,  7,  2,  7, 11,  8,  2,
            0, -1, -3,  1,  2,  0,  2,  1, -3, -1,
            0, -4, 10,  9,  8, -1,  8,  9, 10, -4,
            0,  1, -5,  0,  0,  1,  0,  0, -5,  1,
            0,-17, -9,  0, -2,  0, -2,  0, -9,-17,
            0, -3,-13, -4, 10, -3, 10, -4,-13, -3,
            0,-13, 49, -1,  3,  0,  3, -1, 49,-13,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0     // Boundary	};
        },

        { // RE
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,    // Boundary
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0, -7,  0,  0,  0, -7,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,-27,  0,  0,  0, 26,  0,  0,  0,-27,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0, -9,  0,  0,  0, -9,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0     // Boundary
        },

        { // RG
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,    // Boundary
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0,-14,  0,-14,  0,  0,  0,
            0,  0,  0,  0,  0, -2,  0,  0,  0,  0,
            0,  0,  0,  0, -7,  0, -7,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0     // Boundary
        },

        { // RK
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,    // Boundary
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0,  0,-18,  0,  0,  0,  0,
            0,  0,  0,  0, -6,  0, -6,  0,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0     // Boundary
        },
    };

    const int32 PIECE_SCORES[MAX_CHESS] =
    {
        0, // NONE,
        -100, // BLK_PAWN_1,
        -100, // BLK_PAWN_2,
        -100, // BLK_PAWN_3,
        -100, // BLK_PAWN_4,
        -100, // BLK_PAWN_5,
        -450, // BLK_CANNON_1,
        -450, // BLK_CANNON_2,
        -400, // BLK_HORSE_1,
        -400, // BLK_HORSE_2,
        -900, // BLK_ROOK_1,
        -900, // BLK_ROOK_2,
        -250, // BLK_ELEPHANT_1,
        -250, // BLK_ELEPHANT_2,
        -220, // BLK_GUARD_1,
        -220, // BLK_GUARD_2,
        -5000, // BLK_KING,
        0, // BOUNDARY,
        100, // RED_PAWN_1,
        100, // RED_PAWN_2,
        100, // RED_PAWN_3,
        100, // RED_PAWN_4,
        100, // RED_PAWN_5,
        450, // RED_CANNON_1,
        450, // RED_CANNON_2,
        400, // RED_HORSE_1,
        400, // RED_HORSE_2,
        900, // RED_ROOK_1,
        900, // RED_ROOK_2,
        250, // RED_ELEPHANT_1,
        250, // RED_ELEPHANT_2,
        220, // RED_GUARD_1,
        220, // RED_GUARD_2,
        5000 // RED_KING,
    };
}

Evaluator::Evaluator()
	:
m_score(0)
{
    m_scoreOfDepth.resize(MAX_SEARCH_DEPTH);
}

int32 Evaluator::Evaluate(const Board &a_board)
{
    m_score = 0;

    for (int32 i = BLK_PAWN_1; i <= RED_KING; ++i)
    {
        if (i == BOUNDARY)
        {
            continue;
        }

        if (!a_board.IsDead(static_cast<Chess>(i)))
        {
            m_score += SCORE_BY_POSITION[a_board.GetType(static_cast<Chess>(i))][a_board.GetPos(static_cast<Chess>(i))];
        }
        else
        {
            m_score -= PIECE_SCORES[i];
        }
    }

    return m_score;
}

int32 Evaluator::ChangeScoreByMovePiece(uint32 a_depth, const Board &a_board, Pos a_from, Pos a_to)
{
    assert(a_board[a_from] > NONE);
    assert(a_board[a_from] != BOUNDARY);

    if (a_depth >= m_scoreOfDepth.size())
    {
        m_scoreOfDepth.resize(a_depth + 1);
    }

    m_scoreOfDepth[a_depth] = m_score;

    m_score -= SCORE_BY_POSITION[a_board.GetType(a_board[a_from])][a_from];
    m_score += SCORE_BY_POSITION[a_board.GetType(a_board[a_from])][a_to];

    if (a_board[a_to] != NONE)
    {
        m_score -= SCORE_BY_POSITION[a_board.GetType(a_board[a_to])][a_to];
        m_score -= PIECE_SCORES[a_board[a_to]];
    }

    return m_score;
}

int32 Evaluator::ChangeScoreByUndoMove(uint32 a_depth)
{
    assert(a_depth < m_scoreOfDepth.size());

    m_score = m_scoreOfDepth[a_depth];
    
    return m_score;
}

int32 Evaluator::GetScore() const
{
    return m_score;
}